import { StructuredIncident } from '@/types/export';

export const generateTXT = (incident: StructuredIncident): string => {
  const lines: string[] = [];

  // Header
  lines.push('CLEARCASE - INCIDENT REPORT');
  lines.push('============================');
  lines.push('');
  
  // Basic info
  lines.push(`Title: ${incident.title}`);
  lines.push(`Category: ${incident.category}`);
  lines.push(`Date: ${incident.dateISO}`);
  lines.push('');

  // Main sections
  lines.push('WHAT HAPPENED:');
  lines.push(incident.what);
  lines.push('');

  lines.push('WHERE:');
  lines.push(incident.where);
  lines.push('');

  lines.push('WHEN:');
  lines.push(incident.when);
  lines.push('');

  lines.push('WHO WAS INVOLVED:');
  lines.push(incident.who.join(', '));
  lines.push('');

  if (incident.witnesses.length > 0) {
    lines.push('WITNESSES:');
    lines.push(incident.witnesses.join(', '));
    lines.push('');
  }

  lines.push('SUMMARY:');
  lines.push(incident.summary);
  lines.push('');

  // Optional sections
  if (incident.requests) {
    lines.push('REQUESTS & RESPONSES:');
    lines.push(incident.requests);
    lines.push('');
  }

  if (incident.policy) {
    lines.push('POLICY NOTES:');
    lines.push(incident.policy);
    lines.push('');
  }

  if (incident.evidence) {
    lines.push('EVIDENCE:');
    lines.push(incident.evidence);
    lines.push('');
  }

  // Timeline
  if (incident.timeline.length > 0) {
    lines.push('TIMELINE:');
    incident.timeline.forEach(item => {
      const timePrefix = item.time ? `${item.time} - ` : '- ';
      lines.push(`${timePrefix}${item.note}`);
    });
    lines.push('');
  }

  // Footer
  lines.push('---');
  lines.push(`Created: ${new Date(incident.createdAtISO).toLocaleString()}`);
  if (incident.updatedAtISO) {
    lines.push(`Updated: ${new Date(incident.updatedAtISO).toLocaleString()}`);
  }
  lines.push(`Generated by ClearCase on ${new Date().toLocaleString()}`);

  return lines.join('\n');
};