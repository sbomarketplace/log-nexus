import{B as y}from"./base-C4DS5lKQ.js";import{B as r,a as o,g as m,b as n}from"./nativeAuth-DRgP2dGZ.js";import"./index-D31nPQAt.js";import"./index-CWjiNskl.js";import"./index-CQR_Q1gW.js";class v extends y{constructor(){super(...arguments),this.biometryType=r.none,this.biometryTypes=[],this.biometryIsEnrolled=!1,this.deviceIsSecure=!1}async checkBiometry(){const e=this.biometryType!==r.none,i=e&&this.biometryIsEnrolled;let t="",s=o.none;return e?this.biometryIsEnrolled||(t="Biometry is not enrolled",s=o.biometryNotEnrolled):(t="No biometry is available",s=o.biometryNotAvailable),Promise.resolve({isAvailable:i,strongBiometryIsAvailable:this.biometryIsEnrolled&&this.hasStrongBiometry(),biometryType:this.biometryType,biometryTypes:this.biometryTypes,deviceIsSecure:this.deviceIsSecure,reason:t,code:s})}hasStrongBiometry(){return this.biometryTypes.some(e=>e===r.faceId||e===r.touchId||e===r.fingerprintAuthentication)}async internalAuthenticate(e){const i=await this.checkBiometry();if(!(i.isAvailable&&confirm((e==null?void 0:e.reason)||`Authenticate with ${i.biometryTypes.map(t=>m(t)).join(" or ")}?`))){if(e!=null&&e.allowDeviceCredential){if(i.deviceIsSecure){if(confirm("Authenticate with device security?"))return;throw new n("User cancelled",o.userCancel)}else if(i.isAvailable)throw new n("Device is not secure",o.noDeviceCredential)}else if(!i.isAvailable)throw i.biometryType===r.none?new n("Biometry is not available",o.biometryNotAvailable):new n("Biometry is not enrolled",o.biometryNotEnrolled);throw new n("User cancelled",o.userCancel)}}async setBiometryType(e){if(e===void 0)return Promise.resolve();const i=Array.isArray(e)?e:[e];if(this.biometryTypes=[],this.biometryType=r.none,i.length===0)return Promise.resolve();if(a(i))this.biometryType=i[0],this.biometryType!==r.none&&(this.biometryTypes=i);else for(let t=0;t<i.length;t++)if(r.hasOwnProperty(i[t])){const s=r[i[t]];this.biometryType===r.none?this.biometryTypes=[]:this.biometryTypes.push(s),t===0&&(this.biometryType=s)}return Promise.resolve()}async setBiometryIsEnrolled(e){return this.biometryIsEnrolled=e,Promise.resolve()}async setDeviceIsSecure(e){return this.deviceIsSecure=e,Promise.resolve()}}function a(l){return Object.values(r).includes(l[0])}export{v as BiometricAuthWeb};
